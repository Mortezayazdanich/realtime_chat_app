    // proto/chat.proto

    syntax = "proto3";

    package chat;

    // Message representing a single chat message
    message ChatMessage {
      string sender = 1;      // The user who sent the message
      string content = 2;     // The actual message content
      int64 timestamp = 3;    // Unix timestamp when the message was sent
    }

    // Request message for sending a message
    message SendMessageRequest {
      ChatMessage message = 1;
    }

    // Response message for sending a message (empty for now, could include message ID)
    message SendMessageResponse {
      // Could include a message ID or status here
    }

    // Request message for streaming messages (empty for now, could include filters)
    message StreamMessagesRequest {
      // For example, could add a 'channel_id' or 'last_message_timestamp'
    }

    // NEW: Request message for deleting a message
    message DeleteMessageRequest {
      string message_id = 1; // A unique ID for the message to delete
      // In a real system, you'd need a robust message ID system.
      // For this example, we'll just use a placeholder.
    }

    // NEW: Response message for deleting a message
    message DeleteMessageResponse {
      bool success = 1;
      string message = 2;
    }


    // The ChatService definition
    service ChatService {
      // Unary RPC for sending a single message
      rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);

      // Server-streaming RPC for receiving real-time messages
      rpc StreamMessages (StreamMessagesRequest) returns (stream ChatMessage);

      // NEW: Unary RPC for deleting a message
      rpc DeleteMessage (DeleteMessageRequest) returns (DeleteMessageResponse);
    }
    